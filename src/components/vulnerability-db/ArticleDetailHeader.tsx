"use client";

import { formatTimestampAsDateTime } from "@/lib/utils";
import { useVulDBPostsStore } from "@/stores/useVulDBPostsStore";
import { VulDBPinnedInfo, VulDBPostWithChip } from "@/types/post";
import { useLayoutEffect, useMemo, useState } from "react";
import { Label } from "../ui/Label";
import VulDBPin from "./VulDBPin";
import VulDBShare from "./VulDBShare";
import { LabelSkeleton } from "./VulDBSkeleton";

export function ArticleDetailHeader({
  post,
  userId,
}: {
  post: VulDBPostWithChip;
  userId: string;
}) {
  const { vulDBPostsWithChip } = useVulDBPostsStore();
  const [isMounted, setIsMounted] = useState(false);

  useLayoutEffect(() => {
    setIsMounted(true);
  }, []);

  const chip = useMemo(() => {
    if (!post?.id || !vulDBPostsWithChip) return null;
    const foundPost = vulDBPostsWithChip.find((p) => p.id === post.id);
    return foundPost ? foundPost.chip : null;
  }, [vulDBPostsWithChip, post?.id]);

  const isScrapped = useMemo(() => {
    if (!post?.id || !vulDBPostsWithChip) return false;
    const foundPost = vulDBPostsWithChip.find((p) => p.id === post.id);
    return foundPost ? foundPost.isScrapped : false;
  }, [vulDBPostsWithChip, post?.id]);

  const pinnedInfo: VulDBPinnedInfo = { userId, postId: post?.id || "" };
  return (
    <section className="w-full max-w-[82.125rem] border-b border-b-line-default p-[1.75rem_0_3.75rem_0] px-[1rem]">
      {!isMounted && <LabelSkeleton />}
      {isMounted && chip === "new" && <Label variant="new">NEW</Label>}
      {isMounted && chip === "hot" && <Label>HOT</Label>}
      <h1 className="mb-8 mt-[1.261rem] text-4xl font-medium leading-[2.723rem] tracking-[-0.01em]">
        {post?.title?.translated ||
          post?.title?.original ||
          "제목을 불러오는 데 실패했습니다."}
      </h1>
      <div className="flex items-center justify-between text-xl font-normal leading-[1.512rem] text-gray-default">
        <div className="flex gap-9 tracking-[-0.01em]">
          <p>취약성 뉴스 세부정보</p>
          <p>
            업로드시간 |{" "}
            {post?.created_at
              ? formatTimestampAsDateTime(post.created_at)
              : "알 수 없음"}
          </p>
          <p>
            출시시간 |{" "}
            {post?.source_created_at
              ? formatTimestampAsDateTime(post.source_created_at)
              : "알 수 없음"}
          </p>
        </div>
        <div className="relative flex gap-[1.625rem]">
          <VulDBPin pinnedInfo={pinnedInfo} isScrapped={isScrapped} />
          <VulDBShare postId={post?.id || ""} />
        </div>
      </div>
    </section>
  );
}
