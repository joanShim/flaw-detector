"use client";

import { useVulDBPostsStore } from "@/stores/useVulDBPostsStore";
import { VulDBPost } from "@/types/post";
import { isCertCCContentType, isCnnvdContentType } from "@/types/typeGuards";
import Link from "next/link";
import { ArticleDetailHeader } from "./ArticleDetailHeader";
import { useLayoutEffect, useState } from "react";
import {
  ArticleDetailContentSkeleton,
  ArticleDetailHeaderSkeleton,
} from "./VulDBSkeleton";

type SectionProps = {
  title: string;
  content?: { id: string; text: string }[];
};

const Section: React.FC<SectionProps> = ({ title, content }: SectionProps) => {
  if (!content || content.length === 0) return null;
  return (
    <section className="text-2xl font-medium text-gray-dark">
      {title && <h2 className="mb-2">{title}</h2>}
      {content.map((item) => (
        <p key={item.id} className="leading-10">
          {item.text || "내용 없음"}
        </p>
      ))}
    </section>
  );
};

function CertCCContent({ post }: { post: VulDBPost }) {
  if (!isCertCCContentType(post.content)) return null;

  const { overview, description, impact, solution, cveIDs } = post.content;

  return (
    <div className="mb-14 flex w-[80.25rem] flex-col gap-14">
      <Section title="1. 개요" content={overview?.translated} />
      <Section title="2. 설명" content={description?.translated} />
      <Section title="3. 영향" content={impact?.translated} />
      <Section title="4. 해결책" content={solution?.translated} />
      {cveIDs.length > 0 && (
        <section className="w-full text-2xl font-medium text-gray-dark">
          <h2 className="mb-2">5. CVE ID</h2>
          <ul className="gap-y- flex flex-wrap gap-x-5">
            {cveIDs.map((item) => (
              <li
                key={item}
                className="leading-10 text-red-500 underline-offset-2 hover:underline"
              >
                <Link
                  href={`https://www.cve.org/CVERecord?id=${item}`}
                  target="_blank"
                >
                  {item}
                </Link>
              </li>
            ))}
          </ul>
        </section>
      )}
    </div>
  );
}

function CNNVDContent({ post }: { post: VulDBPost }) {
  if (!isCnnvdContentType(post.content)) return null;

  const { description, introduction, vulnDetail, remediation } = post.content;

  const renderSection = (
    title: string,
    content: { id: string; text: string }[] | undefined,
  ) => {
    if (!content || content.length === 0) return null;

    return (
      <section className="text-2xl font-medium text-gray-dark">
        <h2 className="mb-2">{title}</h2>
        {content.map((item) => (
          <p key={item.id} className="leading-10">
            {item.text || "내용 없음"}
          </p>
        ))}
      </section>
    );
  };

  return (
    <div className="mb-14 flex w-[80.25rem] flex-col gap-14">
      {renderSection("", [{ id: "description", text: description.translated }])}
      {renderSection("1. 취약점 소개", [
        { id: "introduction", text: introduction.translated },
      ])}
      {renderSection("2. 취약점 세부정보", [
        { id: "vulnDetail", text: vulnDetail.translated },
      ])}
      {renderSection("3. 수리 제안", [
        { id: "remediation", text: remediation.translated },
      ])}
    </div>
  );
}

export default function ArticleDetail({
  userId,
  postId,
}: {
  userId: string;
  postId: string;
}) {
  const { vulDBPostsWithChip } = useVulDBPostsStore();
  const [isMounted, setIsMounted] = useState(false);
  const post = vulDBPostsWithChip.filter((post) => post.id === postId)[0];

  useLayoutEffect(() => {
    setIsMounted(true);
  }, []);

  if (!isMounted) {
    return (
      <>
        <ArticleDetailHeaderSkeleton />
        <ArticleDetailContentSkeleton />
      </>
    );
  }
  if (!post) {
    return <p className="text-center text-black">게시물을 찾을 수 없습니다.</p>;
  }

  return (
    <>
      <ArticleDetailHeader post={post} userId={userId} />
      {post.source === "CERT/CC" && <CertCCContent post={post} />}
      {post.source === "CNNVD" && <CNNVDContent post={post} />}
    </>
  );
}
