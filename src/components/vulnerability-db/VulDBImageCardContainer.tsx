"use client";

import { cn, formatTimestampAsDateTime } from "@/lib/utils";
import { VulDBPost } from "@/types/post";
import Link from "next/link";
import { useState } from "react";
import {
  Card,
  CardCoverImage,
  CardFooter,
  CardLinkButton,
  CardProps,
  CardSubTitle,
  CardTitle,
  CardTitleProps,
  CardTitleWrapper,
} from "../ui/Card";

type cardStyles = {
  cardSize: "main" | "sub";
  imageSrc: string;
  titleSize: "big" | "xsmall";
  subtitleSize: "big" | "base";
  titleWrapperWidth: "w-[27.5rem]" | "w-[8.5rem]";
};

type VulDBImageCardProps = VulDBPost & cardStyles;

function VulDBImageCard({
  cardData,
  onMouseOverCard,
  onMouseOutCard,
  cardSize,
  cardTitleSize,
  cardSubtitleSize,
  cardTitleWrapperWidth,
}: {
  cardData: VulDBImageCardProps;
  onMouseOverCard: () => void;
  onMouseOutCard: () => void;
  cardSize: CardProps["size"];
  cardTitleSize: CardTitleProps["size"];
  cardSubtitleSize: CardTitleProps["size"];
  cardTitleWrapperWidth: string;
}) {
  const dateTime = cardData.created_at
    ? formatTimestampAsDateTime(cardData.created_at)
    : "날짜 정보 없음";

  return (
    <Card
      key={cardData.id}
      variant="image"
      size={cardSize}
      onMouseOver={onMouseOverCard}
      onMouseOut={onMouseOutCard}
      className="transition-all duration-300 hover:cursor-pointer"
    >
      <CardCoverImage
        src={cardData.imageSrc}
        alt={`미리보기 이미지: ${cardData.title.translated || cardData.title.original}`}
      />
      <CardFooter className="items-end">
        <CardTitleWrapper className={cn(cardTitleWrapperWidth)}>
          <CardTitle
            size={cardTitleSize}
            weight="bold"
            color="white"
            className="block overflow-visible text-clip whitespace-normal"
          >
            {cardData.title?.translated ||
              cardData.title?.original ||
              "제목 없음"}
          </CardTitle>
          <CardSubTitle size={cardSubtitleSize}>{dateTime}</CardSubTitle>
        </CardTitleWrapper>
        <Link href={`/vuldb/items/${cardData.id}`} passHref legacyBehavior>
          <CardLinkButton />
        </Link>
      </CardFooter>
    </Card>
  );
}

export default function VulDBImageCardContainer({
  posts,
}: {
  posts: VulDBPost[];
}) {
  const cardDatas: VulDBImageCardProps[] = posts.map((item, index) => {
    const cardStyles: cardStyles[] = [
      {
        cardSize: "main",
        imageSrc: "/images/cardThumbnail1.png",
        titleSize: "big",
        subtitleSize: "big",
        titleWrapperWidth: "w-[27.5rem]",
      },
      {
        cardSize: "sub",
        imageSrc: "/images/cardThumbnail2.png",
        titleSize: "xsmall",
        subtitleSize: "base",
        titleWrapperWidth: "w-[8.5rem]",
      },
      {
        cardSize: "sub",
        imageSrc: "/images/cardThumbnail3.png",
        titleSize: "xsmall",
        subtitleSize: "base",
        titleWrapperWidth: "w-[8.5rem]",
      },
    ];

    return { ...item, ...cardStyles[index] };
  });

  const [cardSizes, setCardSizes] = useState(
    cardDatas.map((data) => data.cardSize),
  );
  const [cardTitleSizes, setCardTitleSizes] = useState(
    cardDatas.map((data) => data.titleSize),
  );
  const [cardSubtitleSizes, setCardSubtitleSizes] = useState(
    cardDatas.map((data) => data.subtitleSize),
  );
  const [cardTitleWrapperWidth, setCardTitleWrapperWidth] = useState(
    cardDatas.map((data) => data.titleWrapperWidth),
  );

  const onMouseOverCard = (index: number) => {
    setCardSizes((prevSizes) =>
      prevSizes.map((size, i) =>
        i === index ? "main" : size === "main" ? "sub" : size,
      ),
    );
    setCardTitleSizes((prevSizes) =>
      prevSizes.map((size, i) =>
        i === index ? "big" : size === "big" ? "xsmall" : size,
      ),
    );
    setCardSubtitleSizes((prevSizes) =>
      prevSizes.map((size, i) =>
        i === index ? "big" : size === "big" ? "base" : size,
      ),
    );
    setCardTitleWrapperWidth((prevWidths) =>
      prevWidths.map((width, i) =>
        i === index ? "w-[27.5rem]" : "w-[8.5rem]",
      ),
    );
  };

  const onMouseOutCard = () => {
    setCardSizes(cardDatas.map((data) => data.cardSize));
    setCardTitleSizes(cardDatas.map((data) => data.titleSize));
    setCardSubtitleSizes(cardDatas.map((data) => data.subtitleSize));
    setCardTitleWrapperWidth(cardDatas.map((data) => data.titleWrapperWidth));
  };

  return (
    <div className="flex gap-7">
      {cardDatas.map((cardData, index) => (
        <VulDBImageCard
          key={cardData.id}
          cardData={cardData}
          onMouseOverCard={() => onMouseOverCard(index)}
          onMouseOutCard={onMouseOutCard}
          cardSize={cardSizes[index] as CardProps["size"]}
          cardTitleSize={cardTitleSizes[index] as CardTitleProps["size"]}
          cardSubtitleSize={cardSubtitleSizes[index] as CardTitleProps["size"]}
          cardTitleWrapperWidth={cardTitleWrapperWidth[index]}
        />
      ))}
    </div>
  );
}
