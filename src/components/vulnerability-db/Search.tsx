"use client";

import React, { useState } from "react";
import { Input } from "../ui/Input";
import { IconMagnifierWithPlus } from "../ui/Icons";
import VulDBDashboard from "./VulDBDashboard";
import { VulDBPostWithChip } from "@/types/post";
import RealTimeTopic from "./RealTimeTopic";

export default function Search({
  initialPosts,
  currentPage,
  setCurrentPage,
  totalPages,
  prefetchPage,
  setSelectedChip,
  selectedChip,
  userId,
}: {
  initialPosts: VulDBPostWithChip[];
  currentPage: number;
  setCurrentPage: React.Dispatch<React.SetStateAction<number>>;
  totalPages: number;
  userId: number;
  setSelectedChip: React.Dispatch<React.SetStateAction<"hot" | "new" | "">>;
  selectedChip: "hot" | "new" | "";
  prefetchPage: (page: number) => void;
}) {
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredPosts, setFilteredPosts] =
    useState<VulDBPostWithChip[]>(initialPosts);
  const [isSearchActive, setIsSearchActive] = useState(false); // 검색 상태를 추적

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (searchTerm === "") {
      setFilteredPosts(initialPosts);
      setIsSearchActive(false); // 검색이 비활성화 상태로 변경
      return;
    }

    try {
      const response = await fetch("/api/search", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ searchTerm }),
      });

      if (!response.ok) {
        throw new Error("Error fetching data");
      }

      const data = await response.json();
      setFilteredPosts(data.posts); // 검색된 게시글 리스트를 업데이트
      setIsSearchActive(true); // 검색이 활성화된 상태로 변경
    } catch (error) {
      console.error("Error fetching posts:", error);
      setFilteredPosts(initialPosts); // 검색 실패 시 기본 게시글을 다시 설정
      setIsSearchActive(false); // 검색 실패 시 기본 상태로 복구
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <div className="relative w-full">
          <Input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="검색어를 입력해주세요."
            className="h-[70px] pr-10"
          />

          <button
            type="submit"
            className="absolute right-3 top-1/2 -translate-y-1/2 transform"
          >
            <IconMagnifierWithPlus />
          </button>
        </div>
      </form>
      <div className="mt-[4.75rem] flex justify-between">
        {isSearchActive ? (
          <VulDBDashboard
            posts={filteredPosts}
            currentPage={currentPage}
            totalPages={totalPages}
            setCurrentPage={setCurrentPage}
            setSelectedChip={setSelectedChip}
            selectedChip={selectedChip}
            userId={userId}
            prefetchPage={prefetchPage}
          />
        ) : (
          <VulDBDashboard
            posts={initialPosts}
            currentPage={currentPage}
            totalPages={totalPages}
            setCurrentPage={setCurrentPage}
            setSelectedChip={setSelectedChip}
            selectedChip={selectedChip}
            userId={userId}
            prefetchPage={prefetchPage}
          />
        )}
        <RealTimeTopic />
      </div>
    </div>
  );
}
