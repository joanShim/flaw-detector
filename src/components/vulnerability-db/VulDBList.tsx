import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardSubTitle,
  CardTitle,
} from "@/components/ui/Card";
import { Label } from "@/components/ui/Label";
import { increasePostViews } from "@/lib/api/posts";
import { formatTimestampAsDaysAgo } from "@/lib/utils";
import { VulDBPinnedInfo, VulDBPostWithChip } from "@/types/post";
import { isCertCCContentType, isCnnvdContentType } from "@/types/typeGuards";
import Link from "next/link";
import VulDBPin from "./VulDBPin";
import VulDBShare from "./VulDBShare";
import ExceptionHandlingMessage from "./ExceptionHandlingMessage";

function VulDBListCard({
  post,
  userId,
}: {
  post: VulDBPostWithChip;
  userId: number;
}) {
  if (!post) return null;

  const pinnedInfo: VulDBPinnedInfo = { userId, postId: post.id };
  const daysAgo = formatTimestampAsDaysAgo(post.created_at);

  return (
    <Card
      variant="article"
      size="long"
      className="h-[16.875rem] rounded-[1.25rem] border-line-light"
    >
      <CardHeader>
        <div className="mb-3 flex items-center gap-2">
          {post.chip === "new" && <Label variant="new">NEW</Label>}
          {post.chip === "hot" && <Label>HOT</Label>}
          <CardTitle
            size="small"
            weight="bold"
            color="black"
            className="line-clamp-1"
          >
            {post.title?.translated ||
              post.title?.original ||
              "제목을 불러오는 데 실패했습니다."}
          </CardTitle>
        </div>
        <CardSubTitle
          isSingleLine
          className="block truncate font-medium text-line-dark"
        >
          {post.source || "출처를 알 수 없음"}
        </CardSubTitle>
      </CardHeader>
      <CardContent className="bg-purple-light">
        <div className="block truncate text-base font-medium text-[#797979]">
          {post.source === "CERT/CC" &&
            isCertCCContentType(post.content) &&
            Array.isArray(post.content?.overview?.translated) &&
            post.content.overview.translated.map((item) => (
              <span key={item.id}>
                {item.text || "내용을 불러오는 데 실패했습니다."}
              </span>
            ))}

          {post.source === "CNNVD" &&
            isCnnvdContentType(post.content) &&
            (Array.isArray(post.content?.description?.translated) ? (
              post.content.description.translated.map((item, index) => (
                <span key={index}>
                  {item || "내용을 불러오는 데 실패했습니다."}
                </span>
              ))
            ) : (
              <span>
                {post.content?.description?.translated ||
                  "내용을 불러오는 데 실패했습니다."}
              </span>
            ))}
        </div>
      </CardContent>
      <CardFooter>
        <div className="flex gap-4">
          <VulDBPin pinnedInfo={pinnedInfo} isScrapped={post.isScrapped} />
          <VulDBShare postId={post.id} />
        </div>
        <CardSubTitle color="#A2A2A2" className="font-medium">
          {daysAgo || "날짜를 알 수 없음"}
        </CardSubTitle>
      </CardFooter>
    </Card>
  );
}

export default function VulDBList({
  posts,
  userId,
  selectedChip,
}: {
  posts: VulDBPostWithChip[];
  userId?: number;
  selectedChip?: "hot" | "new" | "";
}) {
  if (!posts || posts.length === 0) {
    if (selectedChip === "new") {
      return (
        <ExceptionHandlingMessage
          situation="최근 48시간 이내에 올라온 게시글이 없어요."
          solution="NEW 필터를 해제하거나 HOT 필터로 다시 시도해 보세요."
        />
      );
    }

    if (selectedChip === "hot") {
      return (
        <ExceptionHandlingMessage
          situation="HOT 게시글이 없어요."
          solution="HOT 필터를 해제하거나 NEW 필터로 다시 시도해 보세요."
        />
      );
    }

    return (
      <ExceptionHandlingMessage
        situation="취약점DB에 검색한 결과가 없어요."
        solution="다른 주제로 다시 검색해 보세요."
      />
    );
  }

  return (
    <ul className="flex flex-col gap-4">
      {posts.map((post: VulDBPostWithChip) => {
        return (
          <li
            key={post.id}
            onClick={async () => {
              try {
                await increasePostViews(post.id);
              } catch (error) {
                console.error(`조회수 증가 실패: ${post.id}`, error);
              }
            }}
          >
            <Link href={`/vuldb/items/${post.id}`}>
              <VulDBListCard post={post} userId={userId as number} />
            </Link>
          </li>
        );
      })}
    </ul>
  );
}
