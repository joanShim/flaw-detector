"use client";

import { Label } from "@/components/ui/Label";
import { loginWithGithub } from "@/lib/actions";
import { ITEMS_PER_DB_PAGE } from "@/lib/const";
import { VulDBPostWithChip } from "@/types/post";
import { useTransition } from "react";
import Button from "../ui/Button";
import { Modal, ModalTitle, ModalTitleWrapper } from "../ui/Modal";
import Pagination from "../ui/Pagination";
import VulDBList from "./VulDBList";

function VulDBAuthGate({
  posts,
  selectedChip,
  userId,
}: {
  posts: VulDBPostWithChip[];
  selectedChip: "hot" | "new" | "";
  userId: number;
}) {
  const [_, startTransition] = useTransition();

  if (!userId) {
    return (
      <>
        <Modal
          variant="login"
          size="small"
          className="-top-[28.8%] px-0"
          isOpen
        >
          <ModalTitleWrapper variant="login">
            <ModalTitle className="text-xl font-medium leading-[1.513rem]">
              자세한 정보를 보고싶다면?
            </ModalTitle>
          </ModalTitleWrapper>
          <Button
            variant="outlined"
            shape="pill"
            className="h-[4.625rem] p-[1.25rem_2rem] text-[1.75rem] font-light leading-[2.118rem] tracking-[-0.01em]"
            onClick={() => startTransition(async () => await loginWithGithub())}
          >
            Login
          </Button>
        </Modal>
        <div className="block size-full whitespace-pre-wrap blur-[0.5rem]">
          <VulDBList posts={posts.slice(0, ITEMS_PER_DB_PAGE)} />
        </div>
      </>
    );
  }

  return (
    <VulDBList posts={posts} userId={userId} selectedChip={selectedChip} />
  );
}

function VulDB({
  posts,
  setSelectedChip,
  selectedChip,
  userId,
  setCurrentPage,
}: {
  posts: VulDBPostWithChip[];
  setSelectedChip: (label: "hot" | "new" | "") => void;
  selectedChip: "hot" | "new" | "";
  userId: number;
  setCurrentPage: React.Dispatch<React.SetStateAction<number>>;
}) {
  const onClickChip = (chip: "hot" | "new") => {
    setSelectedChip(selectedChip === chip ? "" : chip);
    setCurrentPage(1);
  };

  return (
    <section className="relative min-w-[54.063rem] w-full">
      <h2 className="text-2xl font-semibold leading-[1.816rem] tracking-[-0.01em]">
        취약점 DB
      </h2>
      <div className="my-4">
        <Label
          variant={selectedChip === "hot" ? "hot" : "unselected"}
          className="mr-3 cursor-pointer"
          onClick={() => onClickChip("hot")}
        >
          HOT
        </Label>
        <Label
          variant={selectedChip === "new" ? "new" : "unselected"}
          className="cursor-pointer"
          onClick={() => onClickChip("new")}
        >
          NEW
        </Label>
      </div>
      <VulDBAuthGate
        posts={posts}
        selectedChip={selectedChip}
        userId={userId}
      />
    </section>
  );
}

export default function VulDBDashboard({
  posts,
  currentPage,
  setCurrentPage,
  totalPages,
  prefetchPage,
  setSelectedChip,
  selectedChip,
  userId,
}: {
  posts: VulDBPostWithChip[];
  currentPage: number;
  setCurrentPage: React.Dispatch<React.SetStateAction<number>>;
  totalPages: number;
  userId: number;
  setSelectedChip: React.Dispatch<React.SetStateAction<"hot" | "new" | "">>;
  selectedChip: "hot" | "new" | "";
  prefetchPage: (page: number) => void;
}) {
  return (
    <section>
      <VulDB
        posts={posts}
        setSelectedChip={setSelectedChip}
        selectedChip={selectedChip}
        userId={userId}
        setCurrentPage={setCurrentPage}
      />
      <Pagination
        className="absolute bottom-20 left-1/2 -translate-x-1/2 transform"
        currentPage={currentPage}
        totalPages={totalPages}
        setCurrentPage={setCurrentPage}
        prefetchPage={prefetchPage}
      />
    </section>
  );
}
