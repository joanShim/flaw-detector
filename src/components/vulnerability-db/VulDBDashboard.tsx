"use client";

import { Label } from "@/components/ui/Label";
import { loginWithGithub } from "@/lib/actions";
import { ITEMS_PER_DB_PAGE, PAGES_PER_GROUP } from "@/lib/const";
import { useVulDBPostsStore } from "@/stores/useVulDBPostsStore";
import { VulDBPostWithChip } from "@/types/post";
import { Timestamp } from "firebase/firestore";
import { SessionProvider, useSession } from "next-auth/react";
import { useEffect, useState, useTransition } from "react";
import Button from "../ui/Button";
import { Modal, ModalTitle, ModalTitleWrapper } from "../ui/Modal";
import Pagination from "../ui/Pagination";
import VulDBList, { VulDBListCardSkeleton } from "./VulDBList";

// Hot과 New chip에 따른 필터링 적용
const filterByChip = (
  posts: VulDBPostWithChip[],
  selectedChip: "hot" | "new" | "",
) => {
  if (selectedChip === "") {
    // 필터가 적용되지 않은 경우 모든 게시물 표시
    return posts;
  }
  return posts.filter((post) => post.chip === selectedChip);
};

function VulDBAuthGate({ posts }: { posts: VulDBPostWithChip[] }) {
  const [_, startTransition] = useTransition();
  const { data: session, status } = useSession();

  const userId = session?.user?.userId || null;

  if (status === "loading") {
    return (
      <ul className="flex flex-col gap-4">
        {Array.from({ length: 5 }).map((_, index) => (
          <li key={index}>
            <VulDBListCardSkeleton />
          </li>
        ))}
      </ul>
    );
  }

  if (!session) {
    return (
      <>
        <Modal
          variant="login"
          size="small"
          className="-top-[28.8%] px-0"
          isOpen
        >
          <ModalTitleWrapper variant="login">
            <ModalTitle className="text-xl font-medium leading-[1.513rem]">
              자세한 정보를 보고싶다면?
            </ModalTitle>
          </ModalTitleWrapper>
          <Button
            variant="outlined"
            shape="pill"
            className="h-[4.625rem] p-[1.25rem_2rem] text-[1.75rem] font-light leading-[2.118rem] tracking-[-0.01em]"
            onClick={() => startTransition(async () => await loginWithGithub())}
          >
            Login
          </Button>
        </Modal>
        <div className="block size-full whitespace-pre-wrap blur-[0.5rem]">
          <VulDBList posts={posts.slice(0, ITEMS_PER_DB_PAGE)} />
        </div>
      </>
    );
  }

  return <VulDBList posts={posts} userId={userId} />;
}

function VulDB({
  posts,
  setSelectedChip,
  selectedChip,
  setCurrentPage,
}: {
  posts: VulDBPostWithChip[];
  setSelectedChip: (label: "hot" | "new" | "") => void;
  selectedChip: "hot" | "new" | "";
  setCurrentPage: (page: number) => void;
}) {
  const onClickChip = (chip: "hot" | "new") => {
    setSelectedChip(selectedChip === chip ? "" : chip);
    setCurrentPage(1);
  };

  return (
    <section className="relative w-[54.063rem]">
      <h2 className="text-2xl font-semibold leading-[1.816rem] tracking-[-0.01em]">
        취약점 DB
      </h2>
      <div className="my-4">
        <Label
          variant={selectedChip === "hot" ? "hot" : "unselected"}
          className="mr-3 cursor-pointer"
          onClick={() => onClickChip("hot")}
        >
          HOT
        </Label>
        <Label
          variant={selectedChip === "new" ? "new" : "unselected"}
          className="cursor-pointer"
          onClick={() => onClickChip("new")}
        >
          NEW
        </Label>
      </div>
      <VulDBAuthGate posts={posts} />
    </section>
  );
}

export default function VulDBDashboard({
  posts,
  postsWithScrap,
}: {
  posts: VulDBPostWithChip[];
  postsWithScrap: string[];
}) {
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedChip, setSelectedChip] = useState<"hot" | "new" | "">("");
  const [filteredPosts, setFilteredPosts] = useState<VulDBPostWithChip[]>([]);
  const { vulDBPostsWithChip, setVulDBPostsWithChip, updateScrappedPosts } =
    useVulDBPostsStore();

  useEffect(() => {
    if (!posts || posts.length === 0) {
      console.warn("posts 데이터가 없습니다.");
      return;
    }
    if (!postsWithScrap || postsWithScrap.length === 0) {
      console.warn("스크랩된 게시물이 없습니다.");
    }

    setVulDBPostsWithChip(posts);
    updateScrappedPosts(postsWithScrap);
  }, [posts, postsWithScrap]);

  useEffect(() => {
    const filteredPosts = filterByChip(vulDBPostsWithChip, selectedChip);

    // hot인 경우 조회순, new인 경우 최신순 정렬
    const sortedFilteredPosts =
      selectedChip === "hot"
        ? filteredPosts.sort((a, b) => b.views - a.views)
        : filteredPosts.sort((a, b) => {
            const dateA = a.created_at
              ? new Timestamp(
                  a.created_at.seconds,
                  a.created_at.nanoseconds,
                ).toDate()
              : new Date(0);

            const dateB = b.created_at
              ? new Timestamp(
                  b.created_at.seconds,
                  b.created_at.nanoseconds,
                ).toDate()
              : new Date(0);

            return dateB.getTime() - dateA.getTime();
          });

    setFilteredPosts(sortedFilteredPosts);
  }, [selectedChip, vulDBPostsWithChip]);

  const totalPages = Math.ceil(filteredPosts.length / ITEMS_PER_DB_PAGE);

  const currentGroup = Math.ceil(currentPage / PAGES_PER_GROUP);
  const startPage = (currentGroup - 1) * PAGES_PER_GROUP + 1;
  const endPage = Math.min(startPage + PAGES_PER_GROUP - 1, totalPages);

  const currentData = filteredPosts.slice(
    (currentPage - 1) * ITEMS_PER_DB_PAGE,
    currentPage * ITEMS_PER_DB_PAGE,
  );

  return (
    <SessionProvider>
      <VulDB
        posts={currentData}
        setSelectedChip={setSelectedChip}
        selectedChip={selectedChip}
        setCurrentPage={setCurrentPage}
      />
      <Pagination
        className="absolute bottom-[12.25rem] left-1/2 -translate-x-1/2 transform"
        currentPage={currentPage}
        totalPages={totalPages}
        startPage={startPage}
        endPage={endPage}
        setCurrentPage={setCurrentPage}
      />
    </SessionProvider>
  );
}
