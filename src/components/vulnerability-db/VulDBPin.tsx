"use client";

import { showToast } from "@/components/vulnerability-db/Toast";
import { addPinnedPostToUser, deletePinnedPostFromUser } from "@/lib/api/users";
import { VulDBPinnedInfo } from "@/types/post";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";
import IconFilledPin from "../ui/icons/IconFilledPin";
import IconPin from "../ui/icons/IconPin";

export default function VulDBPin({
  pinnedInfo,
  isScrapped,
}: {
  pinnedInfo: VulDBPinnedInfo;
  isScrapped: boolean;
}) {
  const [isClicked, setIsClicked] = useState(isScrapped);
  const queryClient = useQueryClient();

  const addPinnedMutation = useMutation({
    mutationFn: async (info: VulDBPinnedInfo) => {
      await addPinnedPostToUser(info);
    },
    onSuccess: () => {
      queryClient.setQueryData(["posts"], (oldPosts: any) => {
        if (!oldPosts) return [];
        return oldPosts.map((post: any) =>
          post.id === pinnedInfo.postId ? { ...post, isScrapped: true } : post,
        );
      });
      showToast("📌 스크랩이 추가되었습니다");
      queryClient.invalidateQueries({ queryKey: ["posts"] });
    },
    onError: () => {
      setIsClicked(isScrapped);
      showToast("🚨 스크랩에 실패했습니다");
    },
  });

  const deletePinnedMutation = useMutation({
    mutationFn: async (info: VulDBPinnedInfo) => {
      await deletePinnedPostFromUser(info);
    },
    onSuccess: () => {
      queryClient.setQueryData(["posts"], (oldPosts: any) => {
        if (!oldPosts) return [];
        return oldPosts.map((post: any) =>
          post.id === pinnedInfo.postId ? { ...post, isScrapped: false } : post,
        );
      });
      showToast("✅ 스크랩이 취소되었습니다");
      queryClient.invalidateQueries({ queryKey: ["posts"] });
    },
    onError: () => {
      setIsClicked(isScrapped);
      showToast("🚨 스크랩 취소에 실패했습니다");
    },
  });

  const onClickVulDBPin = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.stopPropagation();
    event.preventDefault();

    if (isScrapped || isClicked) {
      setIsClicked(false);
      deletePinnedMutation.mutate(pinnedInfo);
    } else {
      setIsClicked(true);
      addPinnedMutation.mutate(pinnedInfo);
    }
  };

  return (
    <button onClick={onClickVulDBPin}>
      {isClicked ? <IconFilledPin /> : <IconPin />}
    </button>
  );
}
